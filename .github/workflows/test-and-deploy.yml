name: Test and Deploy

on: [push, pull_request]

env:
  SERVICE_NAME: tetesan-hujan-bot
  
jobs:
  unit-test:
    name: unit test and coverage
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16.x
      
      - name: Checkout code
        uses: actions/checkout@v2
      
      - run: go test -race ./... -coverprofile=coverage.out -covermode=atomic
      
      - name: Codecov
        uses: codecov/codecov-action@v1.0.13
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  
  deploy:
    name: build, push, and deploy
    if: github.repository == 'indrasaputra/tetesan-hujan' && github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [unit-test]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          export_default_credentials: true
        
      - name: Authorize Docker push
        run: gcloud auth configure-docker
        
      - name: Build and Push Container
        run: |-
          docker build -t ${{ secrets.CONTAINER_REGISTRY_HOST }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{  github.sha }} -f Dockerfile .
          docker push ${{ secrets.CONTAINER_REGISTRY_HOST }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{  github.sha }}

      - name: Deploy to Cloud Run
        run: |-
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --project ${{ secrets.GCP_PROJECT_ID }} \
            --image ${{ secrets.CONTAINER_REGISTRY_HOST }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{  github.sha }} \
            --region ${{ secrets.GCP_REGION }} \
            --platform managed \
            --port ${{ secrets.PORT }} \
            --allow-unauthenticated \
            --set-env-vars "TELEGRAM_OWNER_ID=${{ secrets.TELEGRAM_OWNER_ID }}" \
            --set-env-vars "TELEGRAM_WEBHOOK_URL=${{ secrets.TELEGRAM_WEBHOOK_URL }}" \
            --set-env-vars "TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}" \
            --set-env-vars "RAINDROP_BASE_URL=${{ secrets.RAINDROP_BASE_URL }}" \
            --set-env-vars "RAINDROP_TOKEN=${{ secrets.RAINDROP_TOKEN }}"
