// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/raindrop_creator.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/indrasaputra/tetesan-hujan/entity"
)

// MockCreateRaindrop is a mock of CreateRaindrop interface
type MockCreateRaindrop struct {
	ctrl     *gomock.Controller
	recorder *MockCreateRaindropMockRecorder
}

// MockCreateRaindropMockRecorder is the mock recorder for MockCreateRaindrop
type MockCreateRaindropMockRecorder struct {
	mock *MockCreateRaindrop
}

// NewMockCreateRaindrop creates a new mock instance
func NewMockCreateRaindrop(ctrl *gomock.Controller) *MockCreateRaindrop {
	mock := &MockCreateRaindrop{ctrl: ctrl}
	mock.recorder = &MockCreateRaindropMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateRaindrop) EXPECT() *MockCreateRaindropMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCreateRaindrop) Create(ctx context.Context, raindrop *entity.Raindrop) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, raindrop)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockCreateRaindropMockRecorder) Create(ctx, raindrop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreateRaindrop)(nil).Create), ctx, raindrop)
}
