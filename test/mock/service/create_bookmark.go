// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/raindrop_creator.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/indrasaputra/tetesan-hujan/entity"
)

// MockCreateBookmark is a mock of CreateBookmark interface
type MockCreateBookmark struct {
	ctrl     *gomock.Controller
	recorder *MockCreateBookmarkMockRecorder
}

// MockCreateBookmarkMockRecorder is the mock recorder for MockCreateBookmark
type MockCreateBookmarkMockRecorder struct {
	mock *MockCreateBookmark
}

// NewMockCreateBookmark creates a new mock instance
func NewMockCreateBookmark(ctrl *gomock.Controller) *MockCreateBookmark {
	mock := &MockCreateBookmark{ctrl: ctrl}
	mock.recorder = &MockCreateBookmarkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateBookmark) EXPECT() *MockCreateBookmarkMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCreateBookmark) Create(ctx context.Context, bookmark *entity.Bookmark) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, bookmark)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockCreateBookmarkMockRecorder) Create(ctx, bookmark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreateBookmark)(nil).Create), ctx, bookmark)
}
